// Code generated by MockGen. DO NOT EDIT.
// Source: authenticationhandler.go

// Package httpauth is a generated GoMock package.
package httpauth

import (
	log "log"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticationHandlerInterface is a mock of AuthenticationHandlerInterface interface.
type MockAuthenticationHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationHandlerInterfaceMockRecorder
}

// MockAuthenticationHandlerInterfaceMockRecorder is the mock recorder for MockAuthenticationHandlerInterface.
type MockAuthenticationHandlerInterfaceMockRecorder struct {
	mock *MockAuthenticationHandlerInterface
}

// NewMockAuthenticationHandlerInterface creates a new mock instance.
func NewMockAuthenticationHandlerInterface(ctrl *gomock.Controller) *MockAuthenticationHandlerInterface {
	mock := &MockAuthenticationHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockAuthenticationHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationHandlerInterface) EXPECT() *MockAuthenticationHandlerInterfaceMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockAuthenticationHandlerInterface) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel.
func (mr *MockAuthenticationHandlerInterfaceMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockAuthenticationHandlerInterface)(nil).Cancel))
}

// Close mocks base method.
func (m *MockAuthenticationHandlerInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockAuthenticationHandlerInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAuthenticationHandlerInterface)(nil).Close))
}

// GetAuthorizationValue mocks base method.
func (m *MockAuthenticationHandlerInterface) GetAuthorizationValue(url *url.URL, responseToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationValue", url, responseToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationValue indicates an expected call of GetAuthorizationValue.
func (mr *MockAuthenticationHandlerInterfaceMockRecorder) GetAuthorizationValue(url, responseToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationValue", reflect.TypeOf((*MockAuthenticationHandlerInterface)(nil).GetAuthorizationValue), url, responseToken)
}

// IsStopped mocks base method.
func (m *MockAuthenticationHandlerInterface) IsStopped() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStopped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStopped indicates an expected call of IsStopped.
func (mr *MockAuthenticationHandlerInterfaceMockRecorder) IsStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStopped", reflect.TypeOf((*MockAuthenticationHandlerInterface)(nil).IsStopped))
}

// SetBasicAuthentication mocks base method.
func (m *MockAuthenticationHandlerInterface) SetBasicAuthentication(userInfo *url.Userinfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBasicAuthentication", userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBasicAuthentication indicates an expected call of SetBasicAuthentication.
func (mr *MockAuthenticationHandlerInterfaceMockRecorder) SetBasicAuthentication(userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBasicAuthentication", reflect.TypeOf((*MockAuthenticationHandlerInterface)(nil).SetBasicAuthentication), userInfo)
}

// SetLogger mocks base method.
func (m *MockAuthenticationHandlerInterface) SetLogger(logger *log.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", logger)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockAuthenticationHandlerInterfaceMockRecorder) SetLogger(logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockAuthenticationHandlerInterface)(nil).SetLogger), logger)
}

// SetSpnegoProvider mocks base method.
func (m *MockAuthenticationHandlerInterface) SetSpnegoProvider(spnegoProvider SpnegoProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSpnegoProvider", spnegoProvider)
}

// SetSpnegoProvider indicates an expected call of SetSpnegoProvider.
func (mr *MockAuthenticationHandlerInterfaceMockRecorder) SetSpnegoProvider(spnegoProvider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSpnegoProvider", reflect.TypeOf((*MockAuthenticationHandlerInterface)(nil).SetSpnegoProvider), spnegoProvider)
}

// Succesful mocks base method.
func (m *MockAuthenticationHandlerInterface) Succesful() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Succesful")
}

// Succesful indicates an expected call of Succesful.
func (mr *MockAuthenticationHandlerInterfaceMockRecorder) Succesful() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Succesful", reflect.TypeOf((*MockAuthenticationHandlerInterface)(nil).Succesful))
}

// Update mocks base method.
func (m *MockAuthenticationHandlerInterface) Update(availableMechanism map[AuthenticationMechanism]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", availableMechanism)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAuthenticationHandlerInterfaceMockRecorder) Update(availableMechanism interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuthenticationHandlerInterface)(nil).Update), availableMechanism)
}
